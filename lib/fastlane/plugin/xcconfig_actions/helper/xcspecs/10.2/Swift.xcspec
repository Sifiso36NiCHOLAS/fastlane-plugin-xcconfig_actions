(
	{
		Identifier = "com.apple.xcode.tools.swift.compiler";
		Type = Compiler;
		Class = "XCCompilerSpecificationSwift";
		Name = "Swift Compiler";
		Description = "Compiles Swift source code into object files.";
		Vendor = Apple;
		Version = "4.0";
		IsAbstract = NO;
		"ShowInCompilerSelectionPopup" = NO;
		InputFileGroupings = (
			tool,
		);
		InputFileTypes = (
			"sourcecode.swift",
		);
		"OptionConditionFlavors" = (
			arch,
			sdk,
		);
		"BuiltinJambaseRuleName" = ProcessSwift;
		ExecPath = "$(SWIFT_EXEC)";
		Architectures = (
			"x86_64",
			i386,
			arm64,
			armv7,
			armv7s
		);
		SynthesizeBuildRule = YES;
		ExecDescription = "Compile Swift source files";
		ProgressDescription = "Compiling Swift source files";
		CommandOutputParser = "XCSwiftCommandOutputParser";
		"SupportsGenerateAssemblyFile" = YES;
		"SupportsGeneratePreprocessedFile" = NO;
        SupportedLanguageVersions = (
            4.0,
            4.2,
            5.0
        );
        LanguageVersionDisplayNames = {
            3.0 = "Swift 3 (unsupported)";
            4.0 = "Swift 4";
            4.2 = "Swift 4.2";
            5.0 = "Swift 5";
        };
		Options = (
			{
				Name = "SWIFT_EXEC";
				Type = Path;
				DefaultValue = swiftc;
			},
			{
				Name = "SWIFT_LIBRARIES_ONLY";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-parse-as-library",
					);
					NO = ();
				};
			},
			{
				Name = "SWIFT_ENABLE_INCREMENTAL_COMPILATION";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-incremental",
					);
					NO = ();
				};
			},
			{
				Name = "SWIFT_PRECOMPILE_BRIDGING_HEADER";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-disable-bridging-pch",
					);
				};
				Category = "General";
				DisplayName = "Precompile Bridging Header";
				Description = "Generate a precompiled header for the Objective-C bridging header, if used, in order to reduce overall build times.";
			},

			// Hidden build setting to control whether parallel -WMO is enabled.
			{
				Name = "SWIFT_USE_PARALLEL_WHOLE_MODULE_OPTIMIZATION";
				Type = Boolean;
				DefaultValue = YES;
			},

			// Hidden build setting to control whether, when building -WMO, targets are built in parallel.
			{
				Name = "SWIFT_USE_PARALLEL_WMO_TARGETS";
				Type = Boolean;
				DefaultValue = YES;
			},

			// Legacy WMO setting, still supported but this has been replaced by a unified SWIFT_OPTIMIZATION_LEVEL.
			{
				Name = "SWIFT_WHOLE_MODULE_OPTIMIZATION";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					// See also SWIFT_ENABLE_BATCH_MODE which is conditional on SWIFT_WHOLE_MODULE_OPTIMIZATION not being set.
					YES = "-whole-module-optimization";
					NO = ();
				};
			},
			{
				Name = "SWIFT_LIBRARY_PATH";
				Type = Path;
				DefaultValue = "";
			},
            {
                Name = "SWIFT_RESOURCE_DIR";
                Type = Path;
                CommandLineFlag = "-resource-dir";
            },
			{
				Name = "SWIFT_MODULE_NAME";
				Type = String;
				DefaultValue = "$(PRODUCT_MODULE_NAME)";
				CommandLineArgs = (
					"-module-name",
					"$(value)",
				);
			},
            {
                Name = "z ";
                Type = String;
                DefaultValue = "";
				Category = "General";
                DisplayName = "Objective-C Bridging Header";
				Description = "Path to the header defining the Objective-C interfaces to be exposed in Swift.";
            },
			{
				Name = "SWIFT_OBJC_INTERFACE_HEADER_NAME";
				Type = String;
				DefaultValue = "$(SWIFT_MODULE_NAME)-Swift.h";
				Category = "General";
				DisplayName = "Objective-C Generated Interface Header Name";
				Description = "Name to use for the header that is generated by the Swift compiler for use in `#import` statements in Objective-C.";
			},
            {
                Name = "SWIFT_INSTALL_OBJC_HEADER";
                Type = Boolean;
                DefaultValue = "YES";
				Category = "General";
                DisplayName = "Install Objective-C Compatibility Header";
				Description = "For frameworks, install the Objective-C compatibility header describing bridged Swift classes into the `PUBLIC_HEADERS_FOLDER_PATH` so they may be accessed from Objective-C code using the framework. Defaults to `YES`.";
            },
			{
				Name = "SWIFT_OPTIMIZATION_LEVEL";
				Type = Enumeration;
				Values = (
					"-Onone",
					"-O",
					"-Osize",
				);
				DefaultValue = "-O";
				CommandLineArgs = {
					// See also SWIFT_ENABLE_BATCH_MODE which is conditional on SWIFT_OPTIMIZATION_LEVEL not being '-Owholemodule'.
					"-Owholemodule" = ("-O", "-whole-module-optimization");
					"<<otherwise>>" = "$(value)";
				};
				Category = "Code Generation";
				DisplayName = "Optimization Level";
			},
			{
				Name = "SWIFT_COMPILATION_MODE";
				Type = Enumeration;
				Values = (
					"singlefile",
					"wholemodule",
				);
				DefaultValue = "singlefile";
				Condition = "!$(SWIFT_WHOLE_MODULE_OPTIMIZATION) && $(SWIFT_OPTIMIZATION_LEVEL) != '-Owholemodule'";
				CommandLineArgs = {
					// See also SWIFT_ENABLE_BATCH_MODE which is conditional on SWIFT_COMPILATION_MODE not being 'wholemodule'.
					"wholemodule" = "-whole-module-optimization";
					"<<otherwise>>" = ();
				};
				Category = "Code Generation";
				DisplayName = "Compilation Mode";
			},
			// Hidden internal setting that decides whether to enable batch mode, conditionalized on all settings that should prevent it.
			{
				Name = "SWIFT_ENABLE_BATCH_MODE";
				Type = Boolean;
				DefaultValue = YES;
				Condition = "!$(SWIFT_WHOLE_MODULE_OPTIMIZATION) && $(SWIFT_OPTIMIZATION_LEVEL) != '-Owholemodule' && $(SWIFT_COMPILATION_MODE) != 'wholemodule'";
				CommandLineArgs = {
					YES = "-enable-batch-mode";
					NO = "-disable-batch-mode";
				};
			},
			{
				Name = "SWIFT_DISABLE_SAFETY_CHECKS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineFlag = "-remove-runtime-asserts";
				Category = "Code Generation";
				DisplayName = "Disable Safety Checks";
				Description = "Disable runtime safety checks when optimizing.";
			},
			{
				Name = "SWIFT_ENFORCE_EXCLUSIVE_ACCESS";
				Type = Enumeration;
				Values = (
					"on",
					"debug-only",
					"off",
				);
				DefaultValue = "on";
				CommandLineArgs = {
					"on" = "-enforce-exclusivity=checked";
					"full" = (); // Handled by __SWIFT_ENFORCE_EXCLUSIVE_ACCESS_DEBUG_ENFORCEMENT
					"debug-only" = (); // Handled by __SWIFT_ENFORCE_EXCLUSIVE_ACCESS_DEBUG_ENFORCEMENT
					"off" = "-enforce-exclusivity=unchecked";
					"compile-time" = "-enforce-exclusivity=unchecked";
					"none" = "-enforce-exclusivity=none";
					"<<otherwise>>" = "-enforce-exclusivity=$(value)";
				};
				Category = "Code Generation";
				DisplayName = "Exclusive Access to Memory";
				Description = "Enforce exclusive access at run-time.";
			},
			{
				Name = "__SWIFT_ENFORCE_EXCLUSIVE_ACCESS_DEBUG_ENFORCEMENT_RELEASE";
				Type = Boolean;
				DefaultValue = YES;
                                // Disable run-time enforcement in non-Onone builds.
                                Condition = "$(SWIFT_OPTIMIZATION_LEVEL) != '-Onone' && ($(SWIFT_ENFORCE_EXCLUSIVE_ACCESS) == 'full' || $(SWIFT_ENFORCE_EXCLUSIVE_ACCESS) == 'debug-only')";
				CommandLineArgs = {
					YES = ( "-enforce-exclusivity=unchecked", );
					NO = ();
				};
			},
			{
				Name = "__SWIFT_ENFORCE_EXCLUSIVE_ACCESS_DEBUG_ENFORCEMENT_DEBUG";
				Type = Boolean;
				DefaultValue = YES;
				// Enable run-time enforcement in -Onone builds.
				Condition = "$(SWIFT_OPTIMIZATION_LEVEL) == '-Onone' && ($(SWIFT_ENFORCE_EXCLUSIVE_ACCESS) == 'full' || $(SWIFT_ENFORCE_EXCLUSIVE_ACCESS) == 'debug-only')";
				CommandLineArgs = {
					YES = ( "-enforce-exclusivity=checked" );
					NO = ();
				};
			},
			{
				Name = "SWIFT_SWIFT3_OBJC_INFERENCE";
				Type = Enumeration;
				Values = (
					"Default",
					"On",
					"Off",
				);
				DefaultValue = "Default";
				CommandLineArgs = {
					"Off" = ("-Xfrontend", "-disable-swift3-objc-inference");
					"On" = ("-Xfrontend", "-enable-swift3-objc-inference", "-Xfrontend", "-warn-swift3-objc-inference-minimal");
				};
				Category = "Code Generation";
				DisplayName = "Swift 3 @objc Inference";
				Description = "Control how the Swift compiler infers @objc for declarations.";
			},
			{
				Name = "SWIFT_STDLIB";
				Type = String;
				DefaultValue = "swiftCore";
			},
			{
				Name = "SWIFT_INCLUDE_PATHS";
				Type = PathList;
				"FlattenRecursiveSearchPathsInValue" = Yes;
				Category = "Search Paths";
                DisplayName = "Import Paths";
                Description = "A list of paths to be searched by the Swift compiler for additional Swift modules.";
			},
			{
				Name = "FRAMEWORK_SEARCH_PATHS";
				Type = PathList;
				"FlattenRecursiveSearchPathsInValue" = Yes;
			},
			{
				Name = "SWIFT_ACTIVE_COMPILATION_CONDITIONS";
				Type = StringList;
				CommandLineArgs = (
					"-D$(value)",
				);
				Category = "Custom Flags";
                DisplayName = "Active Compilation Conditions";
                Description = "A list of compilation conditions to enable for conditional compilation expressions.";
			},
			{
				Name = "OTHER_SWIFT_FLAGS";
				Type = StringList;
				CommandLineArgs = (
					"$(value)",
				);
				Category = "Custom Flags";
                DisplayName = "Other Swift Flags";
                Description = "A list of additional flags to pass to the Swift compiler.";
			},
			{
				Name = SDKROOT;
				Type = Path;
				CommandLineFlag = "-sdk";
			},
            {
                Name = "SWIFT_DEPLOYMENT_TARGET";
                Type = String;
                DefaultValue = "$($(DEPLOYMENT_TARGET_SETTING_NAME))";
                CommandLineArgs = ( "-target", "$(CURRENT_ARCH)-apple-$(SWIFT_PLATFORM_TARGET_PREFIX)$(value)$(LLVM_TARGET_TRIPLE_SUFFIX)" );
            },
            {
                Name = "SWIFT_VERSION";
                Type = String;
                Category = "Language";
                UIType = swiftversion;
                DefaultValue = "";
                DisplayName = "Swift Language Version";
                Description = "";
                Basic = YES;
            },
			{
				Name = "GCC_GENERATE_DEBUGGING_SYMBOLS";
				Type = Boolean;
				CommandLineArgs = {
					YES = (
						"-g",
					);
					NO = ();
				};
			},
			{
				Name = "CLANG_MODULE_CACHE_PATH";
				Type = Path;
				CommandLineFlag = "-module-cache-path";
			},
            {
                Name = "SWIFT_SERIALIZE_DEBUGGING_OPTIONS";
                Type = Boolean;
                DefaultValue = YES;
				CommandLineArgs = {
					YES = ( "-Xfrontend", "-serialize-debugging-options" );
					NO  = ();
				};
            },
			{
				Name = "SWIFT_ENABLE_APP_EXTENSION";
				Type = Boolean;
				DefaultValue = "$(APPLICATION_EXTENSION_API_ONLY)";
				CommandLineArgs = {
					YES = ( "-application-extension" );
					NO  = ();
				};
				// NOTE: These arguments are passed to *Clang*.
				AdditionalLinkerArgs = {
					YES = ( "-fapplication-extension" );
					NO = ();
				};
			},
			{
				Name = "SWIFT_LINK_OBJC_RUNTIME";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = ();
				};
				// This option is passed for linking to inform the compiler
				// that the ObjC runtime must be linked in (with possible
				// backwards compatibility libraries linked in).
				AdditionalLinkerArgs = {
					YES = ( "-fobjc-link-runtime" );
					NO = ();
				};
			},
			{
				Name = "SWIFT_MIGRATE_CODE";
				Type = Boolean;
				CommandLineArgs = {
					YES = (
                        "-update-code",
					);
					NO = ();
				};
			},

			{
				Name = "CLANG_COVERAGE_MAPPING";
				Type = Boolean;
				DefaultValue = NO;
				AdditionalLinkerArgs = {
					NO = ();
					YES = (
						"-fprofile-instr-generate",
					);
				};
				CommandLineArgs = {
					YES = (
						"-profile-coverage-mapping",
						"-profile-generate",
					);
					NO = ();
				};
			},

            // Reflection metadata options
            {
                Name = "SWIFT_REFLECTION_METADATA_LEVEL";
                Type = Enumeration;
                Values = (
                    all,
                    without-names,
                    none,
                );
                DefaultValue = all;
				CommandLineArgs = {
                    all = ();
					without-names = (
                        "-Xfrontend",
						"-disable-reflection-names",
					);
                    none = (
                        "-Xfrontend",
                        "-disable-reflection-metadata",
                    );
				};
				Category = "General";
				DisplayName = "Reflection Metadata Level";
            },

            // Generate bitcode options
            {
                Name = "SWIFT_BITCODE_GENERATION_MODE";
                Type = Enumeration;
                Values = (
                    marker,
                    bitcode,
                );
                DefaultValue = "$(BITCODE_GENERATION_MODE)";
				Architectures = ( arm64, armv7, armv7s, armv7k );
				Condition = "$(ENABLE_BITCODE) == YES";
				CommandLineArgs = {
                    marker = (
                        "-embed-bitcode-marker",
                    );
					bitcode = (
						"-embed-bitcode",
					);
				};
                // Not visible in the build settings editor
            },

			// Address sanitizer options
			{
				Name = "SWIFT_ADDRESS_SANITIZER";
				Type = Boolean;
				DefaultValue = "$(ENABLE_ADDRESS_SANITIZER)";
				CommandLineArgs = {
					YES = (
						"-sanitize=address",
					);
					NO = ();
				};
				AdditionalLinkerArgs = {
					YES = (
						"-fsanitize=address",
					);
					NO = ();
				};
                // Not visible in the build settings editor
			},

			// Thread Sanitizer options.
			{
				Name = "SWIFT_THREAD_SANITIZER";
				Type = Boolean;
				DefaultValue = "$(ENABLE_THREAD_SANITIZER)";
                Architectures = (
                    x86_64,
                    arm64,
                );
				CommandLineArgs = {
					YES = (
						"-sanitize=thread",
					);
					NO = ();
				};
                // Not visible in the build settings editor
			},

            // Testing options
            {
                Name = "SWIFT_ENABLE_TESTABILITY";
                Type = Boolean;
                DefaultValue = "$(ENABLE_TESTABILITY)";
				CommandLineArgs = {
					YES = (
						"-enable-testing",
					);
					NO = ();
				};
                // Not visible in the build settings editor
            },

            // Warnings policy options
			{
				Name = "SWIFT_SUPPRESS_WARNINGS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-suppress-warnings",
					);
					NO = ();
				};
				Category = "Warnings Policies";
				DisplayName = "Suppress Warnings";
				Description = "Don't emit any warnings.";
			},
			{
				Name = "SWIFT_TREAT_WARNINGS_AS_ERRORS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-warnings-as-errors",
					);
					NO = ();
				};
				Category = "Warnings Policies";
				DisplayName = "Treat Warnings as Errors";
				Description = "Treat all warnings as errors.";
			},

			// Index-while-building options, not visible in build settings.
			{
				Name = "SWIFT_INDEX_STORE_PATH";
				Type = Path;
				DefaultValue = "$(INDEX_DATA_STORE_DIR)";
			},
			{
				Name = "SWIFT_INDEX_STORE_ENABLE";
				Type = Boolean;
				DefaultValue = "$(INDEX_ENABLE_DATA_STORE)";
				Condition = "$(COMPILER_INDEX_STORE_ENABLE) == YES  ||  ( $(COMPILER_INDEX_STORE_ENABLE) == Default  &&  $(SWIFT_OPTIMIZATION_LEVEL) == '-Onone' )";
				CommandLineArgs = {
					YES = (
						"-index-store-path",
						"$(SWIFT_INDEX_STORE_PATH)",
					);
					NO = ();
				};
			},

		);
	},
)
