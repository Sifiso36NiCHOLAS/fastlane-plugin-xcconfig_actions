{
	Identifier = "com.apple.pbx.linkers.ld";
	Type = Linker;
	Class = "PBXLinkerSpecificationLd";
	Name = Ld;
	Description = "Link executable using Apple Mach-O Linker (ld)";
	IsAbstract = Yes;
	BinaryFormats = (
		"mach-o",
	);
	Architectures = (
		ppc,
		ppc7400,
		ppc7450,
		ppc970,
		ppc64,
		i386,
		"x86_64",
	);
	CommandLine = "[exec-path] [options] [special-args] -o $(OutputPath)";
	RuleName = "Ld $(OutputPath) $(variant) $(arch)";
	CommandIdentifier = "create:$(OutputPath)";
	ExecDescription = "Link $(OutputPath)";
	ProgressDescription = Linking;
	InputFileTypes = (
		"compiled.mach-o.objfile",
		"compiled.mach-o.dylib",
		"sourcecode.text-based-dylib-definition",
		"wrapper.framework",
		"archive.ar",
	);
	Outputs = (
		"$(OutputPath)",
	);
	DependencyInfoFile = "$(LD_DEPENDENCY_INFO_FILE)";
	CommandOutputParser = "XCGccCommandOutputParser";
	"SupportsInputFileList" = Yes;
	Options = (
		// Target triple (mutually exclusive with os-min-version/arch).
		{
			Name = "LD_TARGET_TRIPLE_ARCHS";
			Type = StringList;
			DefaultValue = "$(CURRENT_ARCH)";
			CommandLineArgs = ( "-target", "$(value)-$(LLVM_TARGET_TRIPLE_VENDOR)-$(LLVM_TARGET_TRIPLE_OS_VERSION)$(LLVM_TARGET_TRIPLE_SUFFIX)" );
			Condition = "$(USE_LLVM_TARGET_TRIPLES_FOR_LD) == YES";
		},
		{
			Name = "LD_TARGET_TRIPLE_VARIANTS";
			Type = StringList;
			CommandLineFlag = "-target-variant";
			Condition = "$(USE_LLVM_TARGET_TRIPLES_FOR_LD) == YES";
			ConditionFlavors = ( arch );
		},
		{
			Name = "LD_ADDITIONAL_DEPLOYMENT_TARGET_FLAGS";
			Type = StringList;
			CommandLineArgs = "$(value)";
			ConditionFlavors = ( arch );
		},
		{
			Name = "arch";
			Type = String;
			CommandLineFlag = "-arch";
			Condition = "$(USE_LLVM_TARGET_TRIPLES_FOR_LD) != YES";
		},
		{
			Name = "MACH_O_TYPE";
			Type = Enumeration;
			Values = (
				{
					Value = "mh_execute";
					CommandLineFlag = "";
				},
				{
					Value = "mh_dylib";
					CommandLineFlag = "-dynamiclib";
				},
				{
					Value = "mh_bundle";
					CommandLineFlag = "-bundle";
				},
				{
					Value = "mh_object";
					CommandLineFlag = "-r";
				},
			);
		},
		{
			Name = SDKROOT;
			Type = Path;
			CommandLineFlag = "-isysroot";
			IsInputDependency = Yes;
		},
		{
			Name = "LIBRARY_SEARCH_PATHS";
			Type = PathList;
			"FlattenRecursiveSearchPathsInValue" = Yes;
			"CommandLinePrefixFlag" = "-L";
		},
		{
			Name = "FRAMEWORK_SEARCH_PATHS";
			Type = PathList;
			"FlattenRecursiveSearchPathsInValue" = Yes;
			"CommandLinePrefixFlag" = "-F";
		},
		{
			Name = "SYSTEM_FRAMEWORK_SEARCH_PATHS";
			Type = PathList;
			FlattenRecursiveSearchPathsInValue = Yes;
			CommandLineFlag = "-iframework";
		},
		{
			Name = "PRODUCT_TYPE_LIBRARY_SEARCH_PATHS";
			Type = PathList;
			"FlattenRecursiveSearchPathsInValue" = Yes;
			"CommandLinePrefixFlag" = "-L";
		},
		{
			Name = "PRODUCT_TYPE_FRAMEWORK_SEARCH_PATHS";
			Type = PathList;
			"FlattenRecursiveSearchPathsInValue" = Yes;
			"CommandLinePrefixFlag" = "-F";
		},
		{
			Name = "__INPUT_FILE_LIST_PATH__";
			Type = Path;
			DefaultValue = "$(LINK_FILE_LIST_$(variant)_$(arch))";
			CommandLineFlag = "-filelist";
			IsInputDependency = Yes;
		},
		{
			Name = "LINKER_DISPLAYS_MANGLED_NAMES";
			Type = Boolean;
			DefaultValue = NO;
			CommandLineArgs = {
				YES = (
					"-Xlinker",
					"--no-demangle",
				);
				NO = ();
			};
		},
		{
			Name = "INIT_ROUTINE";
			Type = String;
			CommandLineFlag = "-init";
		},
		{
			Name = "EXPORTED_SYMBOLS_FILE";
			Type = Path;
			Condition = "$(SEPARATE_SYMBOL_EDIT) == NO";
			CommandLineFlag = "-exported_symbols_list";
			IsInputDependency = Yes;
		},
		{
			Name = "UNEXPORTED_SYMBOLS_FILE";
			Type = Path;
			Condition = "$(SEPARATE_SYMBOL_EDIT) == NO";
			CommandLineFlag = "-unexported_symbols_list";
			IsInputDependency = Yes;
		},
		{
			Name = "REEXPORTED_LIBRARY_NAMES";
			Type = StringList;
			CommandLineArgs = (
				"-Xlinker",
				"-reexport-l$(value)",
			);
		},
		{
			Name = "REEXPORTED_LIBRARY_PATHS";
			Type = PathList;
			CommandLineArgs = (
				"-Xlinker",
				"-reexport_library",
				"-Xlinker",
				"$(value)",
			);
		},
		{
			Name = "REEXPORTED_FRAMEWORK_NAMES";
			Type = StringList;
			CommandLineArgs = (
				"-Xlinker",
				"-reexport_framework",
				"-Xlinker",
				"$(value)",
			);
		},
		{
			Name = "GENERATE_PROFILING_CODE";
			Type = Boolean;
			Condition = "$(variant) == profile";
			CommandLineFlag = "-pg";
		},
		{
			Name = "LD_NO_PIE";
			Type = Boolean;
			DefaultValue = NO;
			CommandLineArgs = {
				YES = (
					"-Xlinker",
					"-no_pie",
				);
				NO = ();
			};
		},
		{
			Name = "LD_DYLIB_INSTALL_NAME";
			Type = Path;
			DefaultValue = "";
			CommandLineFlag = "-install_name";
			Condition = "$(MACH_O_TYPE) == mh_dylib";
		},
		{
			Name = "LD_RUNPATH_SEARCH_PATHS";
			Type = PathList;
			DefaultValue = "";
			CommandLineArgs = (
				"-Xlinker",
				"-rpath",
				"-Xlinker",
				"$(value)",
			);
		},
		{
			Name = "LD_GENERATE_MAP_FILE";
			Type = Boolean;
			DefaultValue = NO;
			CommandLineArgs = {
				YES = (
					"-Xlinker",
					"-map",
					"-Xlinker",
					"$(LD_MAP_FILE_PATH)",
				);
				NO = ();
			};
		},
		{
			Name = "LD_MAP_FILE_PATH";
			Type = Path;
			DefaultValue = "$(TARGET_TEMP_DIR)/$(PRODUCT_NAME)-LinkMap-$(CURRENT_VARIANT)-$(CURRENT_ARCH).txt";
		},
		{
			Name = "LINK_WITH_STANDARD_LIBRARIES";
			Type = Boolean;
			DefaultValue = YES;
			CommandLineArgs = {
				NO = ("-nostdlib");
			};
		},
		{
			Name = "LD_DEPLOYMENT_TARGET";
			Type = String;
			DefaultValue = "$($(DEPLOYMENT_TARGET_SETTING_NAME))";
            CommandLineArgs = {
                "" = ();
                "<<otherwise>>" = (
                    "-$(DEPLOYMENT_TARGET_CLANG_FLAG_NAME)=$(value)",
                );
            };
			"SetValueInEnvironmentVariable" = "$(DEPLOYMENT_TARGET_CLANG_ENV_NAME)";
			Condition = "$(USE_LLVM_TARGET_TRIPLES_FOR_LD) != YES";
		},
		{
			Name = "KEEP_PRIVATE_EXTERNS";
			Type = Boolean;
			DefaultValue = NO;
			CommandLineFlag = "-keep_private_externs";
		},
		{
			Name = "DEAD_CODE_STRIPPING";
			Type = Boolean;
			DefaultValue = NO;
            Condition = "$(MACH_O_TYPE) != mh_object";
			CommandLineFlag = "-dead_strip";
		},
		{
			Name = "PRESERVE_DEAD_CODE_INITS_AND_TERMS";
			Type = Boolean;
			DefaultValue = NO;
			CommandLineFlag = "-no_dead_strip_inits_and_terms";
		},
		{
			Name = "BUNDLE_LOADER";
			Type = Path;
			DefaultValue = "";
			CommandLineFlag = "-bundle_loader";
		},
		{
			Name = "ORDER_FILE";
			Type = Path;
			DefaultValue = "";
			CommandLineArgs = {
				"" = ();
				"<<otherwise>>" = (
					"-Xlinker",
					"-order_file",
					"-Xlinker",
					"$(value)",
				);
			};
		},
		{
			Name = "LD_LTO_OBJECT_FILE";
			Type = Path;
			DefaultValue = "$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_lto.o";
			Condition = "$(GCC_GENERATE_DEBUGGING_SYMBOLS)";
			CommandLineArgs = {
				"" = ();
				"<<otherwise>>" = (
					"-Xlinker",
					"-object_path_lto",
					"-Xlinker",
					"$(value)",
				);
			};
		},
		{
			Name = "LD_EXPORT_GLOBAL_SYMBOLS";
			Type = Boolean;
			DefaultValue = NO;
			CommandLineArgs = {
				YES = (
					"-Xlinker",
					"-export_dynamic",
				);
				NO = ();
			};
		},
		{
			Name = "LD_DONT_RUN_DEDUPLICATION";
			Type = Boolean;
			DefaultValue = YES;
			Condition = "$(GCC_OPTIMIZATION_LEVEL) == '0'";
            SupportedVersionRanges = ( "262.1" );
			CommandLineArgs = {
				YES = (
					"-Xlinker",
					"-no_deduplicate",
				);
				NO = ();
			};
		},
		{
			Name = "LD_OBJC_ABI_VERSION";
			Type = Enumeration;
			Values = (
				1,
				2,
			);
			DefaultValue = "$(OBJC_ABI_VERSION)";
			CommandLineArgs = {
				"" = ();
				"<<otherwise>>" = (
					"-Xlinker",
					"-objc_abi_version",
					"-Xlinker",
					"$(value)",
				);
			};
		},
		{
			Name = "LD_QUOTE_LINKER_ARGUMENTS_FOR_COMPILER_DRIVER";
			Type = Boolean;
			DefaultValue = YES;
		},

        // Bitcode options
		{
			Name = "LD_BITCODE_GENERATION_MODE";
			Type = Enumeration;
			Values = (
				marker,
				bitcode,
			);
			DefaultValue = "$(BITCODE_GENERATION_MODE)";
			Architectures = (
				arm64,
				armv7,
				armv7s,
				armv7k,
			);
			Condition = "$(ENABLE_BITCODE) == YES";
			CommandLineArgs = {
				marker = (
					"-fembed-bitcode-marker",
				);
				bitcode = (
					"-fembed-bitcode",
				);
			};
		},
		{
			Name = "LD_VERIFY_BITCODE";
			Type = Boolean;
			DefaultValue = YES;
			Architectures = (
				arm64,
				armv7,
				armv7s,
				armv7k,
			);
			Condition = "$(ENABLE_BITCODE) == YES  &&  $(BITCODE_GENERATION_MODE) == bitcode";
			CommandLineArgs = {
				YES = (
					"-Xlinker",
					"-bitcode_verify",
				);
				NO = ();
			};
		},
		{
			Name = "LD_HIDE_BITCODE_SYMBOLS";
			Type = Boolean;
			DefaultValue = "$(HIDE_BITCODE_SYMBOLS)";
			Architectures = (
				arm64,
				armv7,
				armv7s,
				armv7k,
			);
			Condition = "$(ENABLE_BITCODE) == YES  &&  $(BITCODE_GENERATION_MODE) == bitcode";
			CommandLineArgs = {
				YES = (
					"-Xlinker",
					"-bitcode_hide_symbols",
				);
				NO = ();
			};
		},
		{
			Name = "LD_GENERATE_BITCODE_SYMBOL_MAP";
			Type = Boolean;
			DefaultValue = "$(HIDE_BITCODE_SYMBOLS)";
			Architectures = (
				arm64,
				armv7,
				armv7s,
				armv7k,
			);
			Condition = "$(ENABLE_BITCODE) == YES  &&  $(BITCODE_GENERATION_MODE) == bitcode  &&  $(MACH_O_TYPE) != mh_object";
			CommandLineArgs = {
				YES = (
					"-Xlinker",
					"-bitcode_symbol_map",
					"-Xlinker",
					"$(BUILT_PRODUCTS_DIR)",
				);
				NO = ();
			};
		},

        // Thread Sanitizer options
        {
            Name = "LD_THREAD_SANITIZER";
            Type = Boolean;
            DefaultValue = "$(ENABLE_THREAD_SANITIZER)";
			Architectures = (
				x86_64,
				arm64,
			);
            CommandLineArgs = {
                YES = (
                    "-fsanitize=thread",
                );
                NO = ();
            };
            // Not visible in the build settings editor
        },

        {
            Name = "LD_DEBUG_VARIANT";
            Type = Boolean;
            DefaultValue = YES;
            Condition = "$(ENABLE_ADDRESS_SANITIZER) == YES || $(ENABLE_THREAD_SANITIZER) == YES || $(ENABLE_UNDEFINED_BEHAVIOR_SANITIZER) == YES";
            SupportedVersionRanges = ( "407" );
            CommandLineArgs = {
                YES = (
                    "-Xlinker",
                    "-debug_variant"
                );
                NO = ();
            };
        },

        // Final output file, relative to $(INSTALL_ROOT)
		{
			Name = "LD_FINAL_OUTPUT_FILE";
			Type = Path;
			DefaultValue = "$(INSTALL_PATH)/$(EXECUTABLE_PATH)";
			Condition = "$(DEPLOYMENT_POSTPROCESSING) == YES  &&  $(SKIP_INSTALL) == NO  &&  $(INSTALL_PATH) != \"\"";
			CommandLineArgs = {
				"" = ();
				"<<otherwise>>" = (
					"-Xlinker",
					"-final_output",
					"-Xlinker",
					"$(value)",
				);
			};
            // Not visible in the build settings editor
		},

        // Dependency info file
		{
			Name = "LD_DEPENDENCY_INFO_FILE";
			Type = Path;
			DefaultValue = "$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_dependency_info.dat";
		},

        // ARC migration options
		{
			Name = "CLANG_ARC_MIGRATE_PRECHECK";
			Type = Enumeration;
			Values = (
				donothing,
				precheck,
			);
			DefaultValue = donothing;
			CommandLineArgs = {
				donothing = ();
				precheck = (
					"-ccc-arcmt-check",
				);
			};
		},
		{
			Name = "CLANG_ARC_MIGRATE_DIR";
			Type = Path;
			CommandLineFlag = "-ccc-arcmt-migrate";
		},

        // Allowable Clients
        {
            Name = "LD_DYLIB_ALLOWABLE_CLIENTS";
            Type = StringList;
            DefaultValue = "";
            CommandLineArgs = (
                "-Xlinker",
                "-allowable_client",
                "-Xlinker",
                "$(value)",
            );
        },

        // Options defined by compilers
		{
			Name = "AdditionalCommandLineArguments";
			Type = StringList;
			"CommandLinePrefixFlag" = "";
		},

        // Other options, mostly user-defined
		{
			Name = "ALL_OTHER_LDFLAGS";
			Type = StringList;
			DefaultValue = "$(LD_FLAGS) $(SECTORDER_FLAGS) $(OTHER_LDFLAGS) $(OTHER_LDFLAGS_$(variant)) $(OTHER_LDFLAGS_$(arch)) $(OTHER_LDFLAGS_$(variant)_$(arch)) $(PRODUCT_SPECIFIC_LDFLAGS)";
			Condition = "$(MACH_O_TYPE) != mh_object";
			"CommandLinePrefixFlag" = "";
		},
		{
			Name = "OTHER_LDRFLAGS";
			Type = StringList;
			DefaultValue = "$(OTHER_LDFLAGS)";
			Condition = "$(MACH_O_TYPE) == mh_object";
			"CommandLinePrefixFlag" = "";
		},
		{
			Name = "ALTERNATE_LINKER";
			Type = String;
			CommandLineArgs = {
				"" = ();
				"<<otherwise>>" = (
					"-fuse-ld=$(value)"
				);
			};
		},
	);
}
