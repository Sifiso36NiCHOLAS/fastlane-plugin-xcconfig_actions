//  Copyright Â© 2007-2017 Apple Inc. All rights reserved.
(
	{
		Type = BuildSystem;
		Identifier = "com.apple.buildsettings.standard";
		Name = "Standard Properties";
		Options = (
			{
				Name = ACTION;
				Type = string;
				DefaultValue = "";
				DisplayName = "Active Build Action";
				Description = "A string identifying the build system action being performed.";
			},
			{
				Name = BUILD_COMPONENTS;
				Type = stringlist;
				DefaultValue = "";
				DisplayName = "Active Build Components";
				Description = "A list of components being built during this action.";
			},
			{
				Name = PROJECT_NAME;
				Type = string;
				DefaultValue = "";
				DisplayName = "Project Name";
				Description = "The name of the current project.";
			},
			{
				Name = TARGET_NAME;
				Type = string;
				DefaultValue = "";
				DisplayName = "Target Name";
				Description = "The name of the current target.";
			},
			{
				Name = SDKROOT;
				Type = string;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "ADDITIONAL_SDKS";
				Type = stringlist;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "SUPPORTED_PLATFORMS";
				Type = stringlist;
				UIType = supportedplatforms;
				DefaultValue = "";
			},
			{
				Name = "SHARED_PRECOMPS_DIR";
				Type = string;
				DefaultValue = "$(OBJROOT)/SharedPrecompiledHeaders";
			},
			{
				Name = "HEADER_SEARCH_PATHS";
				Type = pathlist;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "USER_HEADER_SEARCH_PATHS";
				Type = pathlist;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "LIBRARY_SEARCH_PATHS";
				Type = pathlist;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "FRAMEWORK_SEARCH_PATHS";
				Type = pathlist;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "REZ_SEARCH_PATHS";
				Type = pathlist;
				DefaultValue = "";
			},
            {
                Name = "ALWAYS_SEARCH_USER_PATHS";
                Type = bool;
                DefaultValue = YES;
                ConditionFlavors = (
                    arch,
                );
            },
            {
                Name = "ENABLE_DEFAULT_HEADER_SEARCH_PATHS";
                Type = bool;
                DefaultValue = YES;
            },
			{
				Name = "INCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES";
				Type = stringlist;
				DefaultValue = "";
			},
			{
				Name = "EXCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES";
				Type = stringlist;
				DefaultValue = "*.nib *.lproj *.framework *.gch *.xcode* *.xcassets (*) .DS_Store CVS .svn .git .hg *.pbproj *.pbxproj";
			},
			{
				Name = "PRECOMP_DESTINATION_DIR";
				Type = string;
				DefaultValue = "$(TEMP_DIR)/PrefixHeaders";
			},
			{
				Name = "VERSIONING_SYSTEM";
				Type = enum;
				Values = (
					"",
					"apple-generic",
				);
				DefaultValue = "";
			},
			{
				Name = "CURRENT_PROJECT_VERSION";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_PREFIX";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_SUFFIX";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_BUILDER";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_EXPORT_DECL";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_FILE";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "DEBUG_INFORMATION_FORMAT";
				Type = enum;
				Values = (
					dwarf,
					"dwarf-with-dsym",
				);
				DefaultValue = dwarf;
			},
			{
				Name = "DWARF_DSYM_FILE_NAME";
				Type = string;
				UIType = string;
				DefaultValue = "$(FULL_PRODUCT_NAME).dSYM";
			},
			{
				Name = "DWARF_DSYM_FOLDER_PATH";
				Type = string;
				UIType = string;
				DefaultValue = "$(CONFIGURATION_BUILD_DIR)";
			},
			{
				Name = "DWARF_DSYM_FILE_SHOULD_ACCOMPANY_PRODUCT";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "COLOR_DIAGNOSTICS";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "SCAN_ALL_SOURCE_FILES_FOR_INCLUDES";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "GENERATE_PROFILING_CODE";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "ENABLE_BITCODE";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "HIDE_BITCODE_SYMBOLS";
				Type = bool;
				DefaultValue = YES;
			},
            {
				Name = "BITCODE_GENERATION_MODE";
				Type = enum;
				Values = (
					"marker",
					"bitcode",
				);
				DefaultValue = marker;
			},
			{
				Name = "STRIP_BITCODE_FROM_COPIED_FILES";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR";
				Type = bool;
				DefaultValue = YES;
			},
			{
				Name = "EXCLUDED_INSTALLSRC_SUBDIRECTORY_PATTERNS";
				Type = stringlist;
				DefaultValue = ".DS_Store .svn .git .hg CVS";
			},
			{
				Name = "MACH_O_TYPE";
				Type = enum;
				Values = (
					"mh_execute",
					"mh_dylib",
					"mh_bundle",
					staticlib,
					"mh_object",
				);
				DefaultValue = "";
			},
			{
				Name = "INIT_ROUTINE";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "LINK_WITH_STANDARD_LIBRARIES";
				Type = bool;
				DefaultValue = YES;
			},
			{
				Name = "KEEP_PRIVATE_EXTERNS";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "EXPORTED_SYMBOLS_FILE";
				Type = string;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "UNEXPORTED_SYMBOLS_FILE";
				Type = string;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "SEPARATE_SYMBOL_EDIT";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "DYLIB_CURRENT_VERSION";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "DYLIB_COMPATIBILITY_VERSION";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "LD_DYLIB_INSTALL_NAME";
				Type = path;
				DefaultValue = "";
			},
			{
				Name = "DYLIB_INSTALL_NAME_BASE";
				Type = String;
				DefaultValue = "";
			},
			{
				Name = "SECTORDER_FLAGS";
				Type = stringlist;
				UIType = string;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "ORDER_FILE";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "LD_RUNPATH_SEARCH_PATHS";
				Type = stringlist;
				DefaultValue = "";
			},
			{
				Name = "LD_GENERATE_MAP_FILE";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "LD_MAP_FILE_PATH";
				Type = path;
				DefaultValue = "$(TARGET_TEMP_DIR)/$(PRODUCT_NAME)-LinkMap-$(CURRENT_VARIANT)-$(CURRENT_ARCH).txt";
			},
			{
				Name = "WARNING_LDFLAGS";
				Type = stringlist;
				UIType = string;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "OTHER_LDFLAGS";
				Type = stringlist;
				UIType = string;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "OTHER_LIBTOOLFLAGS";
				Type = stringlist;
				UIType = string;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "DEAD_CODE_STRIPPING";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "PRESERVE_DEAD_CODE_INITS_AND_TERMS";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "BUNDLE_LOADER";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "LINKER_DISPLAYS_MANGLED_NAMES";
				Type = bool;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Xlinker",
						"--no-demangle",
					);
					NO = ();
				};
			},
			{
				Name = "GENERATE_MASTER_OBJECT_FILE";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "PRELINK_LIBS";
				Type = stringlist;
				DefaultValue = "";
			},
			{
				Name = "PRELINK_FLAGS";
				Type = stringlist;
				DefaultValue = "";
			},
			{
				Name = "LD_NO_PIE";
				Type = bool;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Xlinker",
						"-no_pie",
					);
					NO = ();
				};
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "LD_QUOTE_LINKER_ARGUMENTS_FOR_COMPILER_DRIVER";
				Type = Boolean;
				DefaultValue = YES;
			},
			{
				Name = "LD_DEPENDENCY_INFO_FILE";
				Type = Path;
				DefaultValue = "$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_dependency_info.dat";
			},
            {
                Name = "LD_DYLIB_ALLOWABLE_CLIENTS";
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = (
                    arch,
                    sdk,
                );
            },
            
            {   Name = PRODUCT_BUNDLE_IDENTIFIER;
                Type = String;
                Category = Packaging;
                DisplayName = "Product Bundle Identifier";
                Description = "A string that uniquely identifies the bundle. The string should be in reverse DNS format using only alphanumeric characters (`A-Z`, `a-z`, `0-9`), the dot (`.`), and the hyphen (`-`). This value is used as the `CFBundleIdentifier` in the `Info.plist` of the built bundle.";
                DefaultValue = "";
            },

			{
				Name = "PRODUCT_NAME";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "EXECUTABLE_PREFIX";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "EXECUTABLE_EXTENSION";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "WRAPPER_EXTENSION";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "CURRENT_VERSION";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "VERSIONS_FOLDER_PATH";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "PRIVATE_HEADERS_FOLDER_PATH";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "PUBLIC_HEADERS_FOLDER_PATH";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "GENERATE_PKGINFO_FILE";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "INFOPLIST_FILE";
				Type = string;
				DefaultValue = "";
				Basic = YES;
			},
			{
				Name = "INFOPLIST_PREPROCESS";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "INFOPLIST_EXPAND_BUILD_SETTINGS";
				Type = bool;
				DefaultValue = YES;
			},
			{
				Name = "INFOPLIST_OUTPUT_FORMAT";
				Type = Enumeration;
				DefaultValue = "same-as-input";
                Values = (
                    "same-as-input",
                    XML,
                    binary,
                );
			},
			{
				Name = "CREATE_INFOPLIST_SECTION_IN_BINARY";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "PLIST_FILE_OUTPUT_FORMAT";
				Type = Enumeration;
				DefaultValue = "same-as-input";
                Values = (
                    "same-as-input",
                    XML,
                    binary,
                );
			},
			{
				Name = "STRINGS_FILE_OUTPUT_ENCODING";
				Type = Enumeration;
				DefaultValue = "UTF-16";
                Values = (
                    "UTF-16",
                    "UTF-8",
                    binary,
                );
			},
			{
				Name = "APPLY_RULES_IN_COPY_FILES";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "REMOVE_HEADERS_FROM_EMBEDDED_BUNDLES";
				Type = bool;
				DefaultValue = YES;
			},
			{
				Name = "INFOPLIST_PREFIX_HEADER";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "INFOPLIST_OTHER_PREPROCESSOR_FLAGS";
				Type = StringList;
				DefaultValue = "";
			},
			{
				Name = "INFOPLIST_PREPROCESSOR_DEFINITIONS";
				Type = stringlist;
				DefaultValue = "";
				CommandLineArgs = (
					"-D$(value)",
				);
			},
			{
				Name = "COPYING_PRESERVES_HFS_DATA";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "DEPLOYMENT_LOCATION";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "DEPLOYMENT_POSTPROCESSING";
				Type = bool;
				DefaultValue = NO;
			},

			{
				Name = "INSTALL_PATH";
				Type = string;
				DefaultValue = "";
				Basic = YES;
			},
			{
				Name = "SYSTEM_KEXT_INSTALL_PATH";
				Type = string;
				DefaultValue = "$(SYSTEM_LIBRARY_DIR)/Extensions";
			},
			{
				Name = "LIBRARY_KEXT_INSTALL_PATH";
				Type = string;
				DefaultValue = "$(LOCAL_LIBRARY_DIR)/Extensions";
			},
			{
				Name = "DEFAULT_KEXT_INSTALL_PATH";
				Type = string;
				DefaultValue = "$(SYSTEM_KEXT_INSTALL_PATH)";
			},
			{
				Name = "SKIP_INSTALL";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "SEPARATE_STRIP";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "STRIP_STYLE";
				Type = enum;
				Values = (
					all,
					"non-global",
					debugging,
				);
				CommandLineArgs = {
					all = ();
					"non-global" = (
						"-x",
					);
					debugging = (
						"-S",
					);
				};
				DefaultValue = all;
			},
			{
				Name = STRIPFLAGS;
				Type = stringlist;
				UIType = string;
				DefaultValue = "";
			},
			{
				Name = "ALTERNATE_PERMISSIONS_FILES";
				Type = stringlist;
				DefaultValue = "";
			},
			{
				Name = "ALTERNATE_OWNER";
				Type = string;
				DefaultValue = "$(INSTALL_OWNER)";
			},
			{
				Name = "ALTERNATE_GROUP";
				Type = string;
				DefaultValue = "$(INSTALL_GROUP)";
			},
			{
				Name = "ALTERNATE_MODE";
				Type = string;
				DefaultValue = "$(INSTALL_MODE_FLAG)";
			},
			{
				Name = "TEST_HOST";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "TREAT_MISSING_BASELINES_AS_TEST_FAILURES";
				Type = Boolean;
				DefaultValue = NO;
			},
			{
				Name = "EXCLUDED_SOURCE_FILE_NAMES";
				Type = stringlist;
				DefaultValue = "";
			},
			{
				Name = "INCLUDED_SOURCE_FILE_NAMES";
				Type = stringlist;
				DefaultValue = "";
			},
			{
				Name = "MODULE_NAME";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "MODULE_VERSION";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "MODULE_START";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = "MODULE_STOP";
				Type = string;
				DefaultValue = "";
			},
			{
				Name = HOME;
				Type = path;
			},
			{
				Name = LOGNAME;
				Type = string;
			},
			{
				Name = PWD;
				Type = path;
			},
			{
				Name = SHELL;
				Type = path;
			},
			{
				Name = USER;
				Type = string;
			},
			{
				Name = "XCODE_DEVELOPER_DIR_PATH";
				Type = path;
			},
			{
				Name = "METAL_LIBRARY_FILE_BASE";
				Type = string;
				DefaultValue = "default";
			},
			{
				Name = "METAL_LIBRARY_OUTPUT_DIR";
				Type = string;
				DefaultValue = "$(TARGET_BUILD_DIR)/$(UNLOCALIZED_RESOURCES_FOLDER_PATH)";
			},
		);
	},
	{
		Type = BuildSystem;
		Identifier = "com.apple.build-system.core";
		Name = CoreBuildSystem;
		BasedOn = "com.apple.buildsettings.standard";
		IsGlobalDomainInUI = Yes;
		Options = (
			{
				Name = ARCHS;
				Type = StringList;
				UIType = Architectures;
				DefaultValue = "$(ARCHS_STANDARD)";
				ConditionFlavors = (
					sdk,
				);
				Category = Architectures;
				AvoidEmptyValue = YES;
			},
			{
				Name = "ONLY_ACTIVE_ARCH";
				Type = Boolean;
				DefaultValue = NO;
				Category = Architectures;
			},
			{
				Name = "VALID_ARCHS";
				Type = StringList;
				Category = Architectures;
				ConditionFlavors = (
					sdk,
				);
			},
			{
				Name = "ARCHS_STANDARD_32_64_BIT";
				Type = StringList;
			},
			{
				Name = "ARCHS_STANDARD_32_BIT";
				Type = StringList;
			},
			{
				Name = "ARCHS_STANDARD_64_BIT";
				Type = StringList;
			},
			{
				Name = SDKROOT;
				Type = Path;
				UIType = SDKRoot;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
				Category = Architectures;
			},
			{
				Name = "ADDITIONAL_SDKS";
				Type = StringList;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
				);
				Category = Architectures;
			},
			{
				Name = SYMROOT;
				Type = Path;
				DefaultValue = build;
				Category = "Build Locations";
			},
			{
				Name = OBJROOT;
				Type = Path;
				DefaultValue = "$(SYMROOT)";
				Category = "Build Locations";
			},
			{
				Name = LOCROOT;
				Type = Path;
				DefaultValue = "";
			},
			{
				Name = LOCSYMROOT;
				Type = Path;
				DefaultValue = "";
			},
			{
				Name = "CONFIGURATION_BUILD_DIR";
				Type = Path;
				DefaultValue = "$(BUILD_DIR)";
				Category = "Build Locations";
			},
			{
				Name = "CONFIGURATION_TEMP_DIR";
				Type = Path;
				DefaultValue = "$(PROJECT_TEMP_DIR)";
				Category = "Build Locations";
			},
			{
				Name = "SHARED_PRECOMPS_DIR";
				Type = String;
				Category = "Build Locations";
				DefaultValue = "$(OBJROOT)/SharedPrecompiledHeaders";
			},
			{
				Name = "MODULE_CACHE_DIR";
				Type = Path;
				Description = "Absolute path of folder in which compiler stores its cached modulesâthis cache is a performance improvement.";
				DefaultValue = "$(DERIVED_DATA_DIR)/ModuleCache.noindex";
			},
			{
				Name = "HEADER_SEARCH_PATHS";
				Type = PathList;
				Category = "Search Paths";
				ConditionFlavors = (
					arch,
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "USER_HEADER_SEARCH_PATHS";
				Type = PathList;
				Category = "Search Paths";
				ConditionFlavors = (
					arch,
				);
				DefaultValue = "";
			},
            {
                Name = "SYSTEM_HEADER_SEARCH_PATHS";
                Type = PathList;
                Category = "Search Paths";
                DisplayName = "System Header Search Paths";
                Description = "This is a list of paths to folders to be searched by the compiler for included or imported system header files when compiling C, Objective-C, C++, or Objective-C++. The order is from highest to lowest precedence. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted. This setting is very similar to \"Header Search Paths\", except that headers are passed to the compiler in a way that suppresses most warnings for headers found in system search paths. If the compiler doesn't support the concept of system header search paths, then the search paths are appended to any existing header search paths defined in \"Header Search Paths\".";
                ConditionFlavors = (
                    arch,
                    sdk,
                );
                DefaultValue = "";
            },
			{
				Name = "LIBRARY_SEARCH_PATHS";
				Type = PathList;
				Category = "Search Paths";
				ConditionFlavors = (
					arch,
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "FRAMEWORK_SEARCH_PATHS";
				Type = PathList;
				Category = "Search Paths";
				ConditionFlavors = (
					arch,
					sdk,
				);
				DefaultValue = "";
			},
            {
                Name = "SYSTEM_FRAMEWORK_SEARCH_PATHS";
                Type = PathList;
                Category = "Search Paths";
                DisplayName = "System Framework Search Paths";
                Description = "This is a list of paths to folders containing system frameworks to be searched by the compiler for both included or imported header files when compiling C, Objective-C, C++, or Objective-C++, and by the linker for frameworks used by the product. The order is from highest to lowest precedence. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted. This setting is very similar to \"Framework Search Paths\", except that the search paths are passed to the compiler in a way that suppresses most warnings for headers found in system search paths. If the compiler doesn't support the concept of system framework search paths, then the search paths are appended to any existing framework search paths defined in \"Framework Search Paths\".";
                ConditionFlavors = (
                    arch,
                    sdk,
                );
                DefaultValue = "";
            },
			{
				Name = "REZ_SEARCH_PATHS";
				Type = PathList;
				Category = "Search Paths";
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "ALWAYS_SEARCH_USER_PATHS";
				Type = Boolean;
				Category = "Search Paths";
				ConditionFlavors = (
					arch,
				);
				DefaultValue = YES;
			},
			{
				Name = "INCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES";
				Type = StringList;
				Category = "Search Paths";
				DefaultValue = "";
			},
			{
				Name = "EXCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES";
				Type = StringList;
				Category = "Search Paths";
				DefaultValue = "*.nib *.lproj *.framework *.gch *.xcode* *.xcassets (*) .DS_Store CVS .svn .git .hg *.pbproj *.pbxproj";
			},
			{
				Name = "VERSIONING_SYSTEM";
				Type = Enumeration;
				Category = Versioning;
				Values = (
					{
						Value = "";
					},
					{
						Value = "apple-generic";
					},
				);
				DefaultValue = "";
			},
			{
				Name = "CURRENT_PROJECT_VERSION";
				Type = String;
				Category = Versioning;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_PREFIX";
				Type = String;
				Category = Versioning;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_SUFFIX";
				Type = String;
				Category = Versioning;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_BUILDER";
				Type = String;
				Category = Versioning;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_EXPORT_DECL";
				Type = String;
				Category = Versioning;
				DefaultValue = "";
			},
			{
				Name = "VERSION_INFO_FILE";
				Type = String;
				Category = Versioning;
				DefaultValue = "";
			},
			{
				Name = "BUILD_VARIANTS";
				Type = StringList;
				DefaultValue = normal;
				AvoidEmptyValue = YES;
				Category = BuildOptions;
				ConditionFlavors = (
					sdk,
				);
			},
			{
				Name = "DEBUG_INFORMATION_FORMAT";
				Type = Enumeration;
				Category = BuildOptions;
				Values = (
					{
						Value = dwarf;
					},
					{
						Value = "dwarf-with-dsym";
					},
				);
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "SCAN_ALL_SOURCE_FILES_FOR_INCLUDES";
				Type = Boolean;
				DefaultValue = NO;
				Category = BuildOptions;
			},
			{
				Name = "GENERATE_PROFILING_CODE";
				Type = Boolean;
				Category = BuildOptions;
				DefaultValue = NO;
			},
			{
				Name = "ENABLE_BITCODE";
				Type = Boolean;
				DefaultValue = NO;
			},
            {
				Name = "BITCODE_GENERATION_MODE";
				Type = Enumeration;
				Values = (
					{
						Value = "marker";
					},
					{
						Value = "bitcode";
					},
				);
				DefaultValue = marker;
			},
			{
				Name = "HIDE_BITCODE_SYMBOLS";
				Type = Boolean;
				DefaultValue = YES;
			},
			{
				Name = "STRIP_BITCODE_FROM_COPIED_FILES";
				Type = Boolean;
				DefaultValue = NO;
			},
			{
				Name = "PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR";
				Type = Boolean;
				Category = BuildOptions;
				DefaultValue = YES;
			},
			{
				Name = "MACH_O_TYPE";
				Type = Enumeration;
				Category = Linking;
				Values = (
					{
						Value = "mh_execute";
					},
					{
						Value = "mh_dylib";
					},
					{
						Value = "mh_bundle";
					},
					{
						Value = staticlib;
					},
					{
						Value = "mh_object";
					},
				);
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "INIT_ROUTINE";
				Type = String;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "LINK_WITH_STANDARD_LIBRARIES";
				Type = Boolean;
				Category = Linking;
				DefaultValue = YES;
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "KEEP_PRIVATE_EXTERNS";
				Type = Boolean;
				Category = Linking;
				DefaultValue = NO;
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "EXPORTED_SYMBOLS_FILE";
				Type = String;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "UNEXPORTED_SYMBOLS_FILE";
				Type = String;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "SEPARATE_SYMBOL_EDIT";
				Type = Boolean;
				Category = Linking;
				DefaultValue = NO;
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "REEXPORTED_LIBRARY_NAMES";
				Type = StringList;
				Category = Linking;
				DisplayName = "Re-Exported Library Names";
				Description = "List of library names that should have their symbols be reexported from the built library.";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "REEXPORTED_LIBRARY_PATHS";
				Type = PathList;
				Category = Linking;
				DisplayName = "Re-Exported Library Paths";
				Description = "List of library paths that should have their symbols be reexported from the built library.";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "REEXPORTED_FRAMEWORK_NAMES";
				Type = StringList;
				Category = Linking;
				DisplayName = "Re-Exported Framework Names";
				Description = "List of framework names that should have their symbols be reexported from the built library.";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "REEXPORTED_LIBRARY_INSTALL_NAMES";
				Type = PathList;
			},
			{
				Name = "REEXPORTED_FRAMEWORK_INSTALL_NAMES";
				Type = StringList;
			},
			{
				Name = "BUNDLE_LOADER";
				Type = String;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "DYLIB_CURRENT_VERSION";
				Type = String;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "DYLIB_COMPATIBILITY_VERSION";
				Type = String;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "LD_DYLIB_INSTALL_NAME";
				Type = Path;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "DYLIB_INSTALL_NAME_BASE";
				Type = String;
				DefaultValue = "";
				Category = Linking;
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "SECTORDER_FLAGS";
				Type = StringList;
				Category = Linking;
				ConditionFlavors = (
					arch,
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "ORDER_FILE";
				Type = String;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "LD_RUNPATH_SEARCH_PATHS";
				Type = StringList;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "LD_GENERATE_MAP_FILE";
				Type = Boolean;
				Category = Linking;
				DefaultValue = NO;
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "LD_MAP_FILE_PATH";
				Type = Path;
				Category = Linking;
				DefaultValue = "$(TARGET_TEMP_DIR)/$(PRODUCT_NAME)-LinkMap-$(CURRENT_VARIANT)-$(CURRENT_ARCH).txt";
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "DEAD_CODE_STRIPPING";
				Type = Boolean;
				Category = Linking;
				DefaultValue = NO;
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "PRESERVE_DEAD_CODE_INITS_AND_TERMS";
				Type = Boolean;
				Category = Linking;
				DefaultValue = NO;
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "LINKER_DISPLAYS_MANGLED_NAMES";
				Type = Boolean;
				Category = Linking;
				DefaultValue = NO;
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "WARNING_LDFLAGS";
				Type = StringList;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "OTHER_LDFLAGS";
				Type = StringList;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "GENERATE_MASTER_OBJECT_FILE";
				Type = Boolean;
				Category = Linking;
				DefaultValue = NO;
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "PRELINK_LIBS";
				Type = StringList;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "PRELINK_FLAGS";
				Type = StringList;
				Category = Linking;
				DefaultValue = "";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "LD_NO_PIE";
				Type = bool;
				Category = Linking;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Xlinker",
						"-no_pie",
					);
					NO = ();
				};
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "LD_QUOTE_LINKER_ARGUMENTS_FOR_COMPILER_DRIVER";
				Type = Boolean;
				Category = Linking;
				DefaultValue = YES;
				ConditionFlavors = (
					arch,
                    sdk,
				);
			},
			{
				Name = "LD_DEPENDENCY_INFO_FILE";
				Type = Path;
				DefaultValue = "$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_dependency_info.dat";
			},
            {
                Name = "LD_DYLIB_ALLOWABLE_CLIENTS";
                Type = StringList;
                Category = "Linking";
                DefaultValue = "";
                ConditionFlavors = (
                    arch,
                    sdk,
                );
            },
			{
				Name = "LIBRARY_FLAG_NOSPACE";
				Type = bool;
				DefaultValue = YES;
			},
			{
				Name = "LIBRARY_FLAG_PREFIX";
				Type = String;
				DefaultValue = "";
			},
            // FIXME: The TAPI settings should not need to be here in order to have them appear in the project editor UI.
			{
				Name = "SUPPORTS_TEXT_BASED_API";
				Type = Boolean;
				Category  = "Text-Based API";
				DefaultValue = NO;
				DisplayName = "Supports Text-Based InstallAPI";
				Description = "Enable to indicate that the target supports `Text-Based InstallAPI`, which will enable its generation during `install` builds.";
                ConditionFlavors = (
                    arch,
                    sdk,
                );
			},
      {
        Name = "TAPI_VERIFY_MODE";
        Type = Enumeration;
        Category  = "Text-Based API";
        DefaultValue = "ErrorsOnly";
        Values = (
          { Value = "ErrorsOnly"; // Default
            DisplayName = "Errors Only";
          },
          { Value = "ErrorsAndWarnings";
            DisplayName = "Errors and Warnings";
          },
          { Value = "Pedantic";
            DisplayName = "Pedantic";
          },
        );
        DisplayName = "Text-Based InstallAPI Verification Mode";
        Description = "Selects the level of warnings and errors to report when building `Text-Based InstallAPI`.";
      },
			{
				Name = "OTHER_TAPI_FLAGS";
				Type = StringList;
				Category  = "Text-Based API";
				DefaultValue = "";
				DisplayName = "Other Text-Based InstallAPI Flags";
				Description = "Options defined in this setting are passed to invocations of the `Text-Based InstallAPI` tool.";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
      {
        Name = "GENERATE_TEXT_BASED_STUBS";
        Type = bool;
        Category  = "Text-Based API";
        DefaultValue = NO;
        DisplayName = "Enable Text-Based Stubs Generation";
        Description = "Enables the generation of Text-Based stubs for dynamic libraries and frameworks.";
        ConditionFlavors = (
          arch,
          sdk,
        );
      },
      {
        Name = "INLINE_PRIVATE_FRAMEWORKS";
        Type = bool;
        Category  = "Text-Based API";
        DefaultValue = NO;
        DisplayName = "Enable Text-Based Stubs Inlining";
        Description = "Enables private framework inlining for Text-Based Stubs.";
        ConditionFlavors = (
          arch,
          sdk,
        );
      },
			{
				Name = "CODE_SIGNING_ALLOWED";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "CODE_SIGN_IDENTITY";
				Type = CodeSignIdentity;
				Category = "Code Signing";
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
            {   Name = "CODE_SIGN_STYLE";
                DisplayName = "Code Sign Style";
                Type = CodeSignStyle;
                Category = "Code Signing";
                ConditionFlavors = (
                    sdk,
                );
                Values = (
                    "",
                    "Automatic",
                    "Manual"
                );
                DefaultValue = "";
            },
            {
                Name = "DEVELOPMENT_TEAM";
                DisplayName = "Development Team";
                Type = DevelopmentTeam;
                Category = "Code Signing";
                ConditionFlavors = (
                    sdk,
                );
                DefaultValue = "";
            },
            {
                Name = "PROVISIONING_PROFILE_SPECIFIER";
                DisplayName = "Provisioning Profile";
                Type = ProvisioningProfileSpecifier;
                Category = "Code Signing";
                ConditionFlavors = (
                    sdk,
                );
                DefaultValue = "";
            },
			{
				Name = "OTHER_CODE_SIGN_FLAGS";
				Type = StringList;
				Category = "Code Signing";
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "CODE_SIGN_ENTITLEMENTS";
				Type = String;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
				Category = "Code Signing";
			},
            {
                Name = "CODE_SIGN_INJECT_BASE_ENTITLEMENTS";
                Type = Boolean;
                DefaultValue = YES;
                Category = "Code Signing";
            },
            {
                Name = "ENTITLEMENTS_DESTINATION";
                Type = Enumeration;
                Values = (
                    "",
                    "Signature",
                    "__entitlements"
                );
                DefaultValue = "";
            },
			{
				Name = "EMBEDDED_PROFILE_NAME";
				Type = String;
				DefaultValue = "";
			},
			{
				Name = "PRODUCT_NAME";
				Type = String;
				Category = Packaging;
				DefaultValue = "";
				Basic = YES;
			},
			{
				Name = PRODUCT_MODULE_NAME;
				Type = String;
				DefaultValue = "$(PRODUCT_NAME:c99extidentifier)";
				Category = Packaging;
			},
			{
				Name = "FULL_PRODUCT_NAME";
				Type = String;
				DefaultValue = "";
			},
			{
				Name = "EXECUTABLE_PREFIX";
				Type = String;
				Category = Packaging;
				DefaultValue = "";
			},
			{
				Name = "EXECUTABLE_EXTENSION";
				Type = String;
				Category = Packaging;
				DefaultValue = "";
			},
			{
				Name = "WRAPPER_EXTENSION";
				Type = String;
				Category = Packaging;
				DefaultValue = "";
			},
			{
				Name = "PRIVATE_HEADERS_FOLDER_PATH";
				Type = String;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "PUBLIC_HEADERS_FOLDER_PATH";
				Type = String;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "GENERATE_PKGINFO_FILE";
				Type = Boolean;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = NO;
			},
			{
				Name = "INFOPLIST_FILE";
				Type = String;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
				Basic = YES;
			},
			{
				Name = "INFOPLIST_PREPROCESS";
				Type = Boolean;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = NO;
			},
			{
				Name = "INFOPLIST_EXPAND_BUILD_SETTINGS";
				Type = Boolean;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = YES;
			},
			{
				Name = "INFOPLIST_OUTPUT_FORMAT";
				Type = Enumeration;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				Values = (
					"same-as-input",
					XML,
					binary,
				);
				DefaultValue = "same-as-input";
			},
			{
				Name = "CREATE_INFOPLIST_SECTION_IN_BINARY";
				Type = Boolean;
				Category = Packaging;
				DefaultValue = NO;
			},
			{
				Name = "PLIST_FILE_OUTPUT_FORMAT";
				Type = Enumeration;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				Values = (
					"same-as-input",
					XML,
					binary,
				);
				DefaultValue = "same-as-input";
			},
			{
				Name = "STRINGS_FILE_OUTPUT_ENCODING";
				Type = Enumeration;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				Values = (
					"UTF-16",
					"UTF-8",
					binary,
				);
				DefaultValue = "UTF-16";
			},
			{
				Name = "APPLY_RULES_IN_COPY_FILES";
				Category = Packaging;
				Type = Boolean;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = NO;
			},
			{
				Name = "REMOVE_HEADERS_FROM_EMBEDDED_BUNDLES";
				Type = Boolean;
				DefaultValue = YES;
			},
			{
				Name = "INFOPLIST_PREFIX_HEADER";
				Type = String;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "INFOPLIST_PREPROCESSOR_DEFINITIONS";
				Type = StringList;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "INFOPLIST_OTHER_PREPROCESSOR_FLAGS";
				Type = StringList;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "COPYING_PRESERVES_HFS_DATA";
				Type = Boolean;
				Category = Packaging;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = NO;
			},


			// User Defined Modules settings
			{
				Name = DEFINES_MODULE;
				Type = Boolean;
				DefaultValue = NO;
				Category = Packaging;
			},
			{
				Name = MODULEMAP_FILE;
				Type = String;
				ConditionFlavors = ( "sdk" );
				DefaultValue = "";
				Category = Packaging;
			},
			{
				Name = MODULEMAP_PRIVATE_FILE;
				Type = String;
				ConditionFlavors = ( "sdk" );
				DefaultValue = "";
				Category = Packaging;
			},

			{
				Name = "FRAMEWORK_VERSION";
				Type = String;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = A;
				Category = Packaging;
			},
			{
				Name = "DEPLOYMENT_LOCATION";
				Type = Boolean;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = NO;
			},
			{
				Name = "DEPLOYMENT_POSTPROCESSING";
				Type = Boolean;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = NO;
			},
			{
				Name = DSTROOT;
				Type = Path;
				DefaultValue = "/tmp/$(PROJECT_NAME).dst";
				ConditionFlavors = (
					sdk,
				);
				Category = Deployment;
			},
			{
				Name = "INSTALL_PATH";
				Type = String;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
				Basic = YES;
			},
			{
				Name = "SKIP_INSTALL";
				Type = Boolean;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = NO;
			},
			{
				Name = "STRIP_INSTALLED_PRODUCT";
				Type = Boolean;
				DefaultValue = YES;
				ConditionFlavors = (
					sdk,
				);
				Category = Deployment;
				Basic = YES;
			},
			{
				Name = "SEPARATE_STRIP";
				Type = Boolean;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = NO;
			},
			{
				Name = "STRIP_STYLE";
				Type = Enumeration;
				Category = Deployment;
				Values = (
					{
						Value = all;
					},
					{
						Value = "non-global";
					},
					{
						Value = debugging;
					},
				);
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = all;
			},
			{
				Name = STRIPFLAGS;
				Type = StringList;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "STRIP_SWIFT_SYMBOLS";
				Type = Boolean;
				DefaultValue = "YES";
				Category = "Deployment";
			},
			{
				Name = "COPY_PHASE_STRIP";
				Type = Boolean;
				DefaultValue = YES;
				ConditionFlavors = (
					sdk,
				);
				Category = Deployment;
			},
			{
				Name = "INSTALL_OWNER";
				Type = String;
				DefaultValue = "$(USER)";
				ConditionFlavors = (
					sdk,
				);
				Category = Deployment;
			},
			{
				Name = "INSTALL_GROUP";
				Type = String;
				DefaultValue = "$(GROUP)";
				ConditionFlavors = (
					sdk,
				);
				Category = Deployment;
			},
			{
				Name = "INSTALL_MODE_FLAG";
				Type = String;
				DefaultValue = "u+w,go-w,a+rX";
				ConditionFlavors = (
					sdk,
				);
				Category = Deployment;
			},
			{
				Name = "ALTERNATE_PERMISSIONS_FILES";
				Type = StringList;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "ALTERNATE_OWNER";
				Type = String;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "$(INSTALL_OWNER)";
			},
			{
				Name = "ALTERNATE_GROUP";
				Type = String;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "$(INSTALL_GROUP)";
			},
			{
				Name = "ALTERNATE_MODE";
				Type = String;
				Category = Deployment;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "$(INSTALL_MODE_FLAG)";
			},
            {
                Name = "RESOURCES_TARGETED_DEVICE_FAMILY";
                Type = StringList;
                Category = "Deployment";
            },
			{
				Name = "TEST_HOST";
				Type = String;
				Category = UnitTesting;
				ConditionFlavors = (
					sdk,
				);
				DefaultValue = "";
			},
			{
				Name = "TREAT_MISSING_BASELINES_AS_TEST_FAILURES";
				Type = Boolean;
				Category = UnitTesting;
				DefaultValue = NO;
			},
			{
				Name = "MODULE_NAME";
				Type = String;
				Category = KernelModule;
				DefaultValue = "";
			},
			{
				Name = "MODULE_VERSION";
				Type = String;
				Category = KernelModule;
				DefaultValue = "";
			},
			{
				Name = "MODULE_START";
				Type = String;
				Category = KernelModule;
				DefaultValue = "";
			},
			{
				Name = "MODULE_STOP";
				Type = String;
				Category = KernelModule;
				DefaultValue = "";
			},
			{
				Name = "BUILD_STYLE";
				Type = String;
				DefaultValue = "";
			},
			{
				Name = CONFIGURATION;
				Type = String;
				DefaultValue = "";
				Description = "Identifies the build configuration, such as `Debug` or `Release`, that the target uses to generate the product.";
			},
			{
				Name = SRCROOT;
				Type = Path;
				DefaultValue = ".";
				Description = "Identifies the directory containing the targetâs source files.";
			},
			{
				Name = "SOURCE_ROOT";
				Type = Path;
				DefaultValue = "$(SRCROOT)";
			},
			{
				Name = "TEMP_ROOT";
				Type = Path;
				DefaultValue = "$(OBJROOT)";
			},
			{
				Name = "BUILD_ROOT";
				Type = Path;
				DefaultValue = "$(SYMROOT)";
			},
			{
				Name = "INSTALL_ROOT";
				Type = Path;
				DefaultValue = "$(DSTROOT)";
			},
			{
				Name = "PROJECT_DIR";
				Type = Path;
				DefaultValue = "$(SRCROOT)";
			},
			{
				Name = "BUILD_DIR";
				Type = Path;
				DefaultValue = "$(SYMROOT)";
			},
			{
				Name = "PROJECT_TEMP_ROOT";
				Type = Path;
				DefaultValue = "$(OBJROOT)";
			},
			{
				Name = "PROJECT_TEMP_DIR";
				Type = Path;
				DefaultValue = "$(PROJECT_TEMP_ROOT)/$(PROJECT_NAME).build";
				Description = "Identifies the directory in which the projectâs intermediate build files are placed. This directory is shared between all the targets defined by the project. Run Script build phases should generate intermediate build files in the directory identified by `DERIVED_FILE_DIR`, not the location this build setting specifies.";
			},
			{
				Name = "TARGET_TEMP_DIR";
				Type = Path;
				DefaultValue = "$(CONFIGURATION_TEMP_DIR)/$(TARGET_NAME).build";
				Description = "Identifies the directory containing the targetâs intermediate build files. Run Script build phases should place intermediate files at the location indicated by `DERIVED_FILE_DIR`, not the directory identified by this build setting.";
			},
			{
				Name = "TEMP_DIR";
				Type = Path;
				DefaultValue = "$(TARGET_TEMP_DIR)";
			},
			{
				Name = "OBJECT_FILE_DIR";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/Objects";
				Description = "Partially identifies the directory into which variant object files are placed. The complete specification is computed using the variants of this build setting.";
			},
			{
				Name = "CLASS_FILE_DIR";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/JavaClasses";
			},
			{
				Name = "FILE_LIST";
				Type = Path;
				DefaultValue = "$(OBJECT_FILE_DIR)/LinkFileList";
			},
			{
				Name = "DERIVED_FILE_DIR";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/DerivedSources";
				Description = "Identifies the directory into which derived source files, such as those generated by `lex` and `yacc`, are placed.";
			},
			{
				Name = "LOCALIZABLE_CONTENT_DIR";
				Type = Path;
				DefaultValue = "";
			},
			{
				Name = "INSTALL_DIR";
				Type = Path;
				DefaultValue = "$(DSTROOT)$(INSTALL_PATH)";
				Description = "Identifies the directory in the developerâs filesystem into which the *installed* product is placed.";
			},
			{
				Name = "PROJECT_DERIVED_FILE_DIR";
				Type = Path;
				DefaultValue = "$(OBJROOT)/$(PROJECT_NAME).build/DerivedSources";
			},
			{
				Name = "SHARED_DERIVED_FILE_DIR";
				Type = Path;
				DefaultValue = "$(BUILT_PRODUCTS_DIR)/DerivedSources";
			},
			{
				Name = "TARGET_BUILD_DIR";
				Type = Path;
				DefaultValue = "$(CONFIGURATION_BUILD_DIR)$(TARGET_BUILD_SUBPATH)";
				Description = "Identifies the root of the directory hierarchy that contains the productâs files (no intermediate build files). Run Script build phases that operate on product files of the target that defines them should use the value of this build setting, but Run Script build phases that operate on product files of other targets should use `BUILT_PRODUCTS_DIR` instead.";
			},
			 /// The TARGET_BUILD_SUBPATH setting defines an additional macro which can be used to inject a subpath on the target products. This can be redefined in order to cause some part of dependency construction to build in a subpath from the normal build location, and is used by the XCTest product embedding machinery. We use a separate macro for it so that we can set this definition once, and have it impact all the places which might define or override TARGET_BUILD_DIR.
			{
				Name = "TARGET_BUILD_SUBPATH";
				Type = Path;
				DefaultValue = "";
			},
			{
				Name = "BUILT_PRODUCTS_DIR";
				Type = Path;
				DefaultValue = "$(CONFIGURATION_BUILD_DIR)";
				Description = "Identifies the directory under which all the productâs files can be found. This directory contains either product files or symbolic links to them. Run Script build phases can use the value of this build setting as a convenient way to refer to the product files built by one or more targets even when these files are scattered throughout a directory hierarchy (for example, when `DEPLOYMENT_LOCATION` is set to `YES`.";
			},
			{
				Name = "ENABLE_HEADER_DEPENDENCIES";
				Type = Boolean;
				DefaultValue = YES;
				Description = "Specifies whether to automatically track dependencies on included header files.";
			},
			{
				Name = "PATH_PREFIXES_EXCLUDED_FROM_HEADER_DEPENDENCIES";
				Type = PathList;
				DefaultValue = "/usr/include /usr/local/include /System/Library/Frameworks /System/Library/PrivateFrameworks $(SYSTEM_DEVELOPER_DIR)/Headers $(SYSTEM_DEVELOPER_DIR)/SDKs $(SYSTEM_DEVELOPER_DIR)/Platforms";
			},
			{
				Name = "DO_HEADER_SCANNING_IN_JAM";
				Type = Boolean;
				DefaultValue = NO;
			},
			{
				Name = "TEMP_FILE_DIR";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)";
			},
			// We duplicate the temp file directory setting, because historically Xcode would expose this value with this spelling to shell scripts, so it is natural to expect it to be present in build settings as well.
			{
				Name = "TEMP_FILES_DIR";
				Type = Path;
				DefaultValue = "$(TEMP_FILE_DIR)";
			},
			{
				Name = "DERIVED_SOURCES_DIR";
				Type = Path;
				DefaultValue = "$(DERIVED_FILE_DIR)";
			},
			{
				Name = "NATIVE_ARCH";
				Type = String;
				Description = "Identifies the architecture on which the build is being performed.";
			},
			{
				Name = "NATIVE_ARCH_32_BIT";
				Type = String;
			},
			{
				Name = "NATIVE_ARCH_64_BIT";
				Type = String;
			},
			{
				Name = "NATIVE_ARCH_ACTUAL";
				Type = String;
			},
			{
				Name = "REMOVE_CVS_FROM_RESOURCES";
				Type = Boolean;
				DefaultValue = YES;
				Description = "Specifies whether to remove `CVS` directories from bundle resources when they are copied.";
			},
			{
				Name = "REMOVE_SVN_FROM_RESOURCES";
				Type = Boolean;
				DefaultValue = YES;
				Description = "Specifies whether to remove `SVN` directories from bundle resources when they are copied.";
			},
			{
				Name = "REMOVE_GIT_FROM_RESOURCES";
				Type = Boolean;
				DefaultValue = YES;
				Description = "Specifies whether to remove `.git` directories from bundle resources when they are copied.";
			},
			{
				Name = "REMOVE_HG_FROM_RESOURCES";
				Type = Boolean;
				DefaultValue = YES;
				Description = "Specifies whether to remove `.hg` directories from bundle resources when they are copied.";
			},
			{
				Name = "DEBUGGING_SYMBOLS";
				Type = Boolean;
				DefaultValue = YES;
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "PROFILING_CODE";
				Type = Boolean;
				DefaultValue = NO;
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "OTHER_CFLAGS";
				Type = StringList;
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "OTHER_CPLUSPLUSFLAGS";
				Type = StringList;
				DefaultValue = "$(OTHER_CFLAGS)";
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "KEXT_CFLAGS";
				Type = StringList;
				DefaultValue = "";
			},
			{
				Name = "KEXT_CPLUSPLUSFLAGS";
				Type = StringList;
				DefaultValue = "$(KEXT_CFLAGS)";
			},
			{
				Name = CC;
				Type = Path;
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "JAVA_COMPILER";
				Type = Path;
				DefaultValue = "/usr/bin/javac";
			},
			{
				Name = "JAVA_ARCHIVE_CLASSES";
				Type = Boolean;
				DefaultValue = YES;
			},
			{
				Name = "JAVA_ARCHIVE_TYPE";
				Type = String;
				DefaultValue = JAR;
			},
			{
				Name = "JAVA_APP_STUB";
				Type = Path;
				DefaultValue = "$(SYSTEM_LIBRARY_DIR)/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub";
			},
			{
				Name = "JAVA_JAR_FLAGS";
				Type = StringList;
				DefaultValue = cv;
			},
			{
				Name = "JAVA_SOURCE_SUBDIR";
				Type = Path;
				DefaultValue = ".";
			},
			{
				Name = "JAVA_FRAMEWORK_RESOURCES_DIRS";
				Type = PathList;
				DefaultValue = Resources;
			},
			{
				Name = "JAVA_FRAMEWORK_JARS";
				Type = PathList;
				DefaultValue = "";
			},
			{
				Name = "JAVA_USE_DEPENDENCIES";
				Type = Boolean;
				DefaultValue = YES;
			},
			{
				Name = "JAVA_ZIP_FLAGS";
				Type = StringList;
				DefaultValue = "-urg";
			},
			{
				Name = "CLONE_HEADERS";
				Type = Boolean;
				DefaultValue = NO;
			},
			{
				Name = "GCC_VERSION";
				Type = CompilerVersion;
				DefaultValue = "";
				Category = BuildOptions;
				ConditionFlavors = (
					arch,
					sdk,
				);
			},
			{
				Name = "GCC3_VERSION";
				Type = String;
				DefaultValue = "3.3";
			},
			{
				Name = "DEFAULT_COMPILER";
				Type = String;
				DefaultValue = "";
			},
			{
				Name = "MAC_OS_X_VERSION_MAX_ALLOWED";
				Type = String;
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "MAC_OS_X_VERSION_MIN_REQUIRED";
				Type = String;
				ConditionFlavors = (
					arch,
				);
			},
			{
				Name = "USE_HEADERMAP";
				Type = Boolean;
				DefaultValue = YES;
				Category = "Search Paths";
			},
			{
				Name = "USE_HEADER_SYMLINKS";
				Type = Boolean;
				DefaultValue = "";
			},
			{
				Name = "HEADERMAP_INCLUDES_NONPUBLIC_NONPRIVATE_HEADERS";
				Type = Boolean;
				DefaultValue = "$(HEADERMAP_INCLUDES_PROJECT_HEADERS)";
			},
			{
				Name = "HEADERMAP_INCLUDES_FRAMEWORK_ENTRIES_FOR_ALL_PRODUCT_TYPES";
				Type = Boolean;
				DefaultValue = YES;
				Description = "Specifies whether the header map contains a framework-name/path entry for every header in the target being built, including targets that do not build frameworks.";                                
			},
			{
				Name = "HEADERMAP_INCLUDES_FLAT_ENTRIES_FOR_TARGET_BEING_BUILT";
				Type = Boolean;
				DefaultValue = YES;
				Description = "Specifies whether the header map contains a name/path entry for every header in the target being built.";
			},
			{
				Name = "HEADERMAP_INCLUDES_PROJECT_HEADERS";
				Type = Boolean;
				DefaultValue = YES;
				Description = "Specifies whether the header map contains a name/path entry for every header in the project, regardless of the headersâ target membership.";
			},
			{
				Name = "HEADERMAP_USES_FRAMEWORK_PREFIX_ENTRIES";
				Type = Boolean;
				DefaultValue = YES;
			},
			{
				Name = "HEADERMAP_USES_VFS";
				Type = Boolean;
				DefaultValue = "$(DEFINES_MODULE)";
			},
			{
				Name = "EXCLUDED_SOURCE_FILE_NAMES";
				Type = StringList;
				ConditionFlavors = (
					arch,
					sdk,
				);
				DefaultValue = "";
				Category = BuildOptions;
				DisplayName = "Excluded Source File Names";
				Description = "A list of patterns (as defined by `fnmatch(3)`) specifying the names of source files to explicitly *exclude* when processing the sources build phase (see also `INCLUDED_SOURCE_FILE_NAMES`). This setting can be used to define complex filters for which files from the phase should be built in response to other build settings; for example, a value of `*.$(CURRENT_ARCH).c` could serve to exclude particular files based on the architecture being built.";
			},
			{
				Name = "DWARF_DSYM_FOLDER_PATH";
				Type = String;
				DefaultValue = "$(CONFIGURATION_BUILD_DIR)";
			},
			{
				Name = "DWARF_DSYM_FILE_NAME";
				Type = String;
				DefaultValue = "$(FULL_PRODUCT_NAME).dSYM";
			},
			{
				Name = "DWARF_DSYM_FILE_SHOULD_ACCOMPANY_PRODUCT";
				Type = bool;
				DefaultValue = NO;
			},
			{
				Name = "PRECOMP_DESTINATION_DIR";
				Type = String;
				DefaultValue = "$(TEMP_DIR)/PrefixHeaders";
			},
			{
				Name = "INCLUDED_SOURCE_FILE_NAMES";
				Type = StringList;
				ConditionFlavors = (
					arch,
					sdk,
				);
				DefaultValue = "";
				Category = BuildOptions;
				DisplayName = "Included Source File Names";
				Description = "A list of patterns (as defined by `fnmatch(3)`) specifying the names of source files to explicitly *include* when processing the sources build phase. This setting is only useful when combined with `EXCLUDED_SOURCE_FILE_NAMES`, and can be used to define complex filters for which files from the phase should be built in response to other build settings.";
			},
			// Index-while-building options
			{
				Name = "COMPILER_INDEX_STORE_ENABLE";
				Type = Enumeration;
				Values = (
					Default,
					YES,
					NO,
				);
				DefaultValue = Default;
				Category = BuildOptions;
				DisplayName = "Enable Index-While-Building Functionality";
				Description = "Control whether the compiler should emit index data while building.";
			},
			{
				Name = TOOLCHAINS;
				Type = StringList;
				DefaultValue = "";
			},
			{
				Name = "REZ_EXECUTABLE";
				Type = String;
				DefaultValue = "";
			},
			{
				Name = "APPLICATION_EXTENSION_API_ONLY";
				Type = bool;
				DefaultValue = NO;
				Category = BuildOptions;
			},
            {   Name = COPY_HEADERS_RUN_UNIFDEF;
                Type = Boolean;
                DefaultValue = NO;
                DisplayName = "Run unifdef on Product Headers";
                Category = Headers;
                Description = "If enabled, headers are run through the `unifdef(1)` tool when copied to the product.";
            },
            {   Name = COPY_HEADERS_UNIFDEF_FLAGS;
                Type = StringList;
                DefaultValue = "";
                DisplayName = "Unifdef Flags for Product Headers";
                Category = Headers;
                ConditionFlavors = (
                    sdk,
                );
                Description = "Specifies the flags to pass to `unifdef(1)` when invoking that tool to copy headers. This setting has no effect unless `COPY_HEADERS_RUN_UNIFDEF` is enabled.";
            },
            {   Name = INSTALLHDRS_COPY_PHASE;
                Type = Boolean;
                DefaultValue = NO;
                DisplayName = "Perform Copy Files Phases During `installhdrs`";
                Description = "Specifies whether the targetâs Copy Files build phases are executed in `installhdr` builds.";
            },
            {   Name = INSTALLHDRS_SCRIPT_PHASE;
                Type = Boolean;
                DefaultValue = NO;
                DisplayName = "Perform Shell Script Phases During `installhdrs`";
                Description = "Specifies whether the targetâs Run Script build phases are executed in `installhdr` builds. See `ACTION` for details on `installhdr` builds.";
            },

            {   Name = ENABLE_TESTABILITY;
                Type = Boolean;
                DefaultValue = NO;
                DisplayName = "Enable Testability";
                Category = BuildOptions;
                Description = "When this setting is activated, the product will be built with options appropriate for running automated tests, such as making private interfaces accessible to the tests. This may result in tests running slower than they would without testability enabled.";
            },
            
            // Localization Settings
            {   Name = LOCALIZED_STRING_MACRO_NAMES;
                Type = StringList;
                DefaultValue = "NSLocalizedString CFLocalizedString";
                DisplayName = "Localized String Macro Names";
                Category = "Localization";
                Description = "The base names for NSLocalizedString-like macros or functions used to produce localized strings in source code. The default base names of NSLocalizedString and CFLocalizedString are always considered, even if this setting is empty.";
            },
            
            {   Name = BUILD_ACTIVE_RESOURCES_ONLY;
                Type = Boolean;
                DefaultValue = NO;
            },
            {   Name = ENABLE_ON_DEMAND_RESOURCES;
                Type = Boolean;
                DefaultValue = NO;
                DisplayName = "Enable On Demand Resources";
                Category = Assets;
                Description = "If enabled, tagged assetsâfiles and asset catalog entriesâare built into asset packs based on their combination of tags. Untagged resources are treated normally.";
            },
            {   Name = EMBED_ASSET_PACKS_IN_PRODUCT_BUNDLE;
                Type = Boolean;
                DefaultValue = NO;
                DisplayName = "Embed Asset Packs In Product Bundle";
                Category = Assets;
                Description = "Embed all the built asset packs inside the product bundle. Since this negates the performance benefits of the On Demand Resources feature, it is only useful for testing purposes when it isn't practical to use an asset pack server.";
            },
            {   Name = ON_DEMAND_RESOURCES_INITIAL_INSTALL_TAGS;
                Type = StringList;
                DisplayName = "On Demand Resources Initial Install Tags";
                Category = Assets;
                Description = "Defined a set of initial On Demand Resources tags to be downloaded and installed with your application.";
            },
            {   Name = ON_DEMAND_RESOURCES_PREFETCH_ORDER;
                Type = StringList;
                DisplayName = "On Demand Resources Prefetch Order";
                Description = "Once your app is installed, this defined a set of On Demand Resources tags that should be downloaded. These tags are downloaded after the initial installation of your application, and will be downloaded in the order the tags provided in the list from first to last.";
                Category = Assets;
            },
            {   Name = ASSET_PACK_MANIFEST_URL_PREFIX;
                Type = String;
                DefaultValue = "";
                DisplayName = "Asset Pack Manifest URL Prefix";
                Description = "If set to anything other than the empty string, every URL in the `AssetPackManifest.plist` file will consist of this string with the name of the asset pack appended. If not set, the URLs in the `AssetPackManifest.plist` will be formed as appropriate for the build location of the asset packs. The prefix string is not escaped or quoted in any way, so any necessary escaping must be part of the URL string. This setting affects only URLs in the `AssetPackManifest.plist` file â it does not affect where asset packs are built in the local file system.";
                Category = Assets;
            },
            {   Name = WRAP_ASSET_PACKS_IN_SEPARATE_DIRECTORIES;
                Type = Boolean;
                DefaultValue = NO;
            },
		);
	},
)
