desc "Example of reading xcconfig file"
lane :read do
  # Read basic xcconfig.
  json = read_xcconfig(
    path: "spec/fixtures/configs/basic.xcconfig"
  )

  # Output is a JSON string.
  config = JSON.parse(json)
  UI.message("basic.xcconfig value for key 'A': #{config['A']}")
  UI.message("basic.xcconfig value for key 'B3': #{config['B3']}")

  # Read xcconfig using parent xcconfig to simulate xcode inheritance.
  json = read_xcconfig(
    path: "spec/fixtures/configs/inheritance.xcconfig",
    parent: "spec/fixtures/configs/parent.xcconfig"
  )

  config = JSON.parse(json)
  UI.message("inheritance.xcconfig value for key 'A1': #{config['A1']}")
  UI.message("inheritance.xcconfig value for key 'B3': #{config['B3']}")
end

desc "Example of mapping build settings to build flags"
lane :build_flags do
  read_xcconfig(path: "spec/fixtures/configs/build_flags/basic.xcconfig")
  build_flags = build_settings_to_flags
  puts(build_flags)
end

desc "Example of validating xcconfig file"
lane :validate do
  issues = validate_xcconfig(
    path: "spec/fixtures/configs/validate/all_issues.xcconfig",
    root_path: "spec/fixtures/configs/validate"
  )

  issues.each do |issue|
    UI.important(issue)
  end
end

###
# @!group Build Settings
###

def repo_path
  `git rev-parse --show-toplevel`.strip
end

desc "Copy xcspec files from Xcode.app path and convert them to XMl"
lane :copy_xcspecs_from_xcode do |options|
  path = options[:path] || "/Applications/Xcode.app"
  UI.message("Copying specs from #{path}")
  UI.user_error!("No such path: #{path}") unless File.exist?(path)
  plugins_path = File.join(path, "Contents", "Plugins")

  specs = [
    Dir[File.join(plugins_path, "**/Clang LLVM*.xcspec")].first,
    Dir[File.join(plugins_path, "**/Swift.xcspec")].first,
    Dir[File.join(plugins_path, "**/Ld.xcspec")].first,
    Dir[File.join(plugins_path, "**/CoreBuildSystem.xcspec")].first
  ]

  xcodebuild = File.join(path, "Contents/Developer/usr/bin/xcodebuild")
  version = `#{xcodebuild} -version | head -n1 | cut -d' ' -f2 | xargs`.chomp
  specs_dir = File.join(repo_path, "lib/fastlane/plugin/xcconfig_actions/helper/xcspecs/#{version}")
  UI.message("Using Xcode version #{version}")
  UI.message("Copying to #{specs_dir}")
  FileUtils.mkdir_p(specs_dir)

  specs.each do |s|
    UI.message("Processing #{File.basename(s)}")
    output_path = File.join(specs_dir, File.basename(s))
    result = system("plutil -convert xml1 -o #{output_path.shellescape} #{s.shellescape}")
    UI.user_error!("Failed to convert xcspec to XML") unless result
  end
end
