desc "Example of reading xcconfig file"
lane :read do
  # Read basic xcconfig.
  json = read_xcconfig(
    path: "spec/fixtures/configs/basic.xcconfig"
  )

  # Output is a JSON string.
  config = JSON.parse(json)
  UI.message("basic.xcconfig value for key 'A': #{config['A']}")
  UI.message("basic.xcconfig value for key 'B3': #{config['B3']}")

  # Read xcconfig using parent xcconfig to simulate xcode inheritance.
  json = read_xcconfig(
    path: "spec/fixtures/configs/inheritance.xcconfig",
    parent: "spec/fixtures/configs/parent.xcconfig"
  )

  config = JSON.parse(json)
  UI.message("inheritance.xcconfig value for key 'A1': #{config['A1']}")
  UI.message("inheritance.xcconfig value for key 'B3': #{config['B3']}")
end

desc "Example of mapping build settings to build flags"
lane :build_flags do
  read_xcconfig(path: "spec/fixtures/configs/build_flags/basic.xcconfig")
  build_flags = build_settings_to_flags
  puts(build_flags)
end

desc "Example of validating xcconfig file"
lane :validate do
  issues = validate_xcconfig(
    path: "spec/fixtures/configs/validate/all_issues.xcconfig",
    root_path: "spec/fixtures/configs/validate"
  )

  issues.each do |issue|
    UI.important(issue)
  end
end

###
# @!group Build Settings
###

lane :generate_build_settings do
  project = "../spec/fixtures/xcode/build_settings/build_settings.xcodeproj"
  scheme = "ios"
  # cli_build_settings = cli_build_settings(project, scheme)
  # puts cli_build_settings
  xcode_build_settings(project, scheme)
end

def cli_build_settings(project, scheme)
  cmd = [
    "xcodebuild -showBuildSettings -project #{project} -scheme #{scheme}",
    "sed -e 's/^[ \t]*//g'",
    "sed -e 's/ =.*$//g'",
    "tail -n +2"
  ].join(" | ")
  `#{cmd}`.chomp
end

def xcode_build_settings(project, scheme)
  system("open #{project}")
end
